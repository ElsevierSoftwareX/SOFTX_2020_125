<?php

// Get libraries.
require_once('DAO.php');
require_once('GetStructure.php');
require_once('InitVar.php');

// Flag class.
class GetServerData
{
	public $query_form;
	public $server_status;
	
	// Get current server status.
	public function get_current_server_status($content_id) {
		// Instantiate.
		$dao = new DAO();
		// If in right area.
		if($content_id == 27) {
			// Set start time.
			$start_time = microtime();
			// Get host array.
			$host_array = $dao->get_value_array(2);
			// Loop host array.
			foreach($host_array as $key=> $host) {
				// Get file contents.
				$a = json_decode(file_get_contents($host.'/dq'), true);
				// Set stop time.
				$stop_time = microtime();
				// Set elapsed time.
				$elapsed_time = round($stop_time-$start_time, 5);
				// If returned contents are array.
				if(is_array($a)) {
					// Include with p tag.
					$this->server_status = '<p><img src="images/green_arrow.png" alt="" title="" id="green_arrow_virgo" class="green_arrow" />'.$host.' - Virgo instance responding in '.$elapsed_time.' seconds</p>';
				}
				// Otherwise.
				else {
					// Include with p tag.
					$this->server_status = '<p><img src="images/green_faded_arrow.png" alt="" title="" id="green_arrow_virgo" class="green_arrow" />'.$host.' - Virgo instance currently unavailable</p>';
				}
			}
		}
	}

	// Get query form div.
	public function get_query_form_div($tabs) {
		// Init.
		$r = NULL;
		// Instantiate.
		$structure = new GetStructure();
		// Open DIV.
		$structure->openDiv('query_server', $tabs,'');
		$r .= $structure->div;
		// Get query form.
		$this->get_query_form($tabs);
		$r .= $this->query_form;
		// Close DIV.
		$structure->closeDiv('query_server', $tabs);
		$r .= $structure->div;
		// Return.
		return $r;
	}

	// Get query form.
	public function get_query_form($tabs) {
		// Instantiate.
		$dao = new DAO();
		$structure = new GetStructure();
		// OPEN FORM.
		$this->query_form .= "	<form method=\"POST\" id=\"frm_query_server\">\n";
		// GET IFO.
		$f = "IFO";
		$s = "	<select id=\"ifo\" onchange=\"update_div_query_server()\">\n";
		// If the default host has not been set, e.g. from a Jquery request.
		if(!isset($_SERVER['default_host'])) {
			// Set default host.
			$_SERVER['default_host'] = $this->get_quickest_host();
		}
		// Get IFO array.
		$a = json_decode(file_get_contents($_SERVER['default_host'].'/dq'), true);
		// If IFO array has been returned.
		if(is_array($a)) {
			// Init counter.
			$n = 0;
			// Add all IFO.
			array_unshift($a['Ifos'], 'Use_all_IFO');
			// Loop host array.
			foreach($a['Ifos'] as $key => $ifo) {
				$n++;
				// If on first loop and no default has yet been set.
				if($n == 1 && !isset($_SERVER['ifo'])) {
					// Set default host.
					$_SERVER['ifo'] = $ifo;
				}
				// Set selected.
				$sel = NULL;
				if($ifo == $_SERVER['ifo']) {
					$sel = " selected=\"selected\"";
				}
				// Set.
				$s .= "		<option value=\"$ifo\"".$sel.">".str_replace('_', ' ', $ifo)."</option>\n";
			}
		}
		// Close select.
		$s .= "	</select>\n";
		// Add to form.
		$this->query_form .= $structure->get_form_structure($f, $s);
		// GET FLAGS.
		$f = "DQ Flag";
		$s = "	<select multiple size=\"8\" id=\"dq_flag\">\n";
		// If selecting all flags.
		if($_SERVER['ifo'] == 'Use_all_IFO') {
			$res_uri = $_SERVER['default_host'].'/report/flags';
		}
		else {
			$res_uri = $_SERVER['default_host'].'/dq/'.$_SERVER['ifo'];
		}
		// Get resource array.
		$a = json_decode(file_get_contents($res_uri), true);
		// If uri array has been returned.
		if(is_array($a)) {
			// Add all Flags.
			array_unshift($a['results'], '/dq/IFO/Use_all_Flags');
			// Loop host array.
			foreach($a['results'] as $key => $uri) {
				// Extract flags.
				$u = explode('/',$uri);
				// If selecting all flags.
				if($_SERVER['ifo'] == 'Use_all_IFO') {
					// If actually at the Use_all_Flags key.
					if($u[2] == 'IFO') {
						$flag_uri_txt = str_replace('_',' ',$u[3]);
						$flag_uri_txt = str_replace('IFO/',' ',$flag_uri_txt);
					}
					if($u[2] != 'IFO') {
						$flag_uri_txt = $u[2].' - '.$u[3];
					}
				}
				// Or, if selecting flags associated to a specific IFO..
				elseif($_SERVER['ifo'] == $u[2]) {
					$flag_uri_txt = $u[3];
				}
				// Set.
				$s .= "		<option value=\"$flag_uri\">".$flag_uri_txt."</option>\n";
			}
		}
		// Close select.
		$s .= "	</select>\n";
		// Add to form.
		$this->query_form .= $structure->get_form_structure($f, $s);
		$this->query_form .= "	</form>\n";
	}

	// Get the quickest-replying server host.
	public function get_quickest_host() {
		// Init
		$r = NULL;
		$quickest_reply = 10;
		$elapsed_time = 10;
		// Instantiate.
		$dao = new DAO();
		// Set start time.
		$start_time = microtime();
		// Get host array.
		$host_array = $dao->get_value_array(2);
		// Loop host array.
		foreach($host_array as $key=> $host) {
			// Get file contents.
			$a = json_decode(file_get_contents($host.'/dq'), true);
			// If an array is returned.
			if(is_array($a)) {
				// Set stop time.
				$stop_time = microtime();
				// Set elapsed time.
				$elapsed_time = round($stop_time-$start_time, 5);
			}
			// Check.
			if($elapsed_time < $quickest_reply) {
				// Set as quickest replying host.
				$r = $host;
			}
		}
		// Return.
		return $r;
	}
}

?>
